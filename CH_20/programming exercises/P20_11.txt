••• P 20.11 Implement the merge sort algorithm of Chapter 14 by spawning a new thread for each smaller MergeSorter. Hint: Use the join 

method of the Thread class to wait for the spawned threads to finish. Look up the method’s behavior in the API documentation.
========================================================================================
solution
---------
import java.util.Arrays;

public class MergeSorter
{
	public static  void sort(int[] a)
	{
		 if (a.length <= 1) { return; }
		 int[] first = new int[a.length / 2];
		 int[] second = new int[a.length - first.length];
		 // Copy the first half of a into first, the second half into second
		 for (int i = 0; i < first.length; i++)
		 {
			 first[i] = a[i];
		 }
		 for (int i = 0; i < second.length; i++)
		 {
			 second[i] = a[first.length + i];
		 }
		 Thread t1 = new Thread(new SortRunnable(first));
		 Thread t2 = new Thread(new SortRunnable(second));
		 
		 t1.start();
		 t2.start();
		 
		 try
		 {
			 t1.join();
			 t2.join();
		 }
		 catch(InterruptedException  e){}
		 
		 
		 merge(first, second, a);
		 
	}
	
	private static  void merge(int[] first, int[] second, int[] a)
	{
		 int iFirst = 0; // Next element to consider in the first array
		 int iSecond = 0; // Next element to consider in the second array
		 int j = 0; // Next open position in a
		
		 // As long as neither iFirst nor iSecond past the end, move
		 // the smaller element into a
		 while (iFirst < first.length && iSecond < second.length)
		 {
			 if (first[iFirst] < second[iSecond])
			 {
				 a[j] = first[iFirst];
				 iFirst++;
			 }
			 else
			 {
				 a[j] = second[iSecond];
				 iSecond++;
			 }
			  	 j++;
		  }
		 
		  // Note that only one of the two loops below copies entries
		  // Copy any remaining entries of the first array
		  while (iFirst < first.length)
		  {
			  a[j] = first[iFirst];
			  iFirst++; j++;
		  }
		  // Copy any remaining entries of the second half
		  while (iSecond < second.length)
		  {
			  a[j] = second[iSecond];
			  iSecond++; j++;
		  }
	  }
}
========================================================================================
public class SortRunnable implements Runnable
{
	private int [] a;
	public SortRunnable(int [] a)
	{
		this.a = a;
	}

	public void run() 
	{
		MergeSorter.sort(a);
	}
}
========================================================================================
import java.util.Arrays;

public class test 
{
	public static void main(String [] args)
	{
		
		 int[] a = ArrayUtil.randomIntArray(20, 100);
		 System.out.println(Arrays.toString(a));
		
		 MergeSorter.sort(a);
		
		 System.out.println(Arrays.toString(a));

	}	
}
========================================================================================