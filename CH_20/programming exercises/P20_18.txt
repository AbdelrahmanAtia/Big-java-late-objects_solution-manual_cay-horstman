••• Graphics P 20.18 Enhance Exercise P20.17 so that it shows two frames, one for a merge sorter and one for a selection sorter. They should both sort arrays with the same values.
========================================================================================
solution
---------
import java.awt.Color;
import java.awt.Graphics;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.swing.JComponent;

public class MergeSorter
{
	private int[] a;
	
	private int markedPosition = -1;
	private int alreadySorted = -1;
	
	private Lock sortStateLock;
	
	private JComponent component;
	
	private static final int DELAY = 5;
	
	public MergeSorter (int[] anArray, JComponent aComponent)
	{
		 a = anArray;
		 sortStateLock = new ReentrantLock();
		 component = aComponent;
	}
	
	public void mergeSort(int from, int to) throws InterruptedException
	{
		if (from == to) { return; }
	    int mid = (from + to) / 2;
	    mergeSort(from, mid);
	    mergeSort(mid + 1, to);
	    merge(from, mid, to);
	}
	
	private void merge(int from,int mid,int to) throws InterruptedException
	{
		 int iFirst = from; // Next element to consider in the first array
		 int iSecond = mid + 1;; // Next element to consider in the second array
		 int j = 0; // Next open position in a
		 int [] b = new int[a.length];
		 int steps = 0;
		
		 // As long as neither iFirst nor iSecond past the end, move
		 // the smaller element into a
		 while (iFirst <= mid && iSecond <= to)
		 {
			 if (a[iFirst] < a[iSecond])
			 {
				 b[j] = a[iFirst];
				 iFirst++;
				 steps++;
			 }
			 else
			 {
				 b[j] = a[iSecond];
				 iSecond++;
				 steps++;
			 }
			 j++;
		  }
		 
		  // Note that only one of the two loops below copies entries
		  // Copy any remaining entries of the first array
		  while (iFirst <= mid)
		  {
			  b[j] = a[iFirst];
			  iFirst++; j++;
			  steps++; // for animation delay , because we inspected one array element steps is increased by one
		  }
		  // Copy any remaining entries of the second half
		  while (iSecond <= to)
		  {
			  b[j] = a[iSecond];
			  iSecond++; j++;
			  steps++;
		  }
		  
		  //copy the array b into a
		  int s = 0; 
		  for(int i = from; i <= to; i++)
		  {
			  a[i] = b[s];
			  s++;
			  markedPosition = i;
			  alreadySorted = i;
			  steps++;
			  pause(steps);
			  steps--;
		  }
	}
	 public void draw(Graphics g)
	 {
		 sortStateLock.lock();
		 try
		 {
			 int deltaX = component.getWidth() / a.length;
			 for (int i = 0; i < a.length; i++)
			 {
				 if (i == markedPosition)
				 {
					 g.setColor(Color.RED);
				 }
				 else if (i < alreadySorted)
				 {
					 g.setColor(Color.BLUE);
				 }
				 else
				 {
					 g.setColor(Color.BLACK);
				 }
				 
				 g.drawLine(i * deltaX, component.getHeight(), i * deltaX,component.getHeight() -  a[i]);
			 }
		 }
		 finally
		 {
			 sortStateLock.unlock();
		 }
	 }
	public void pause(int steps)  throws InterruptedException
	{
		 component.repaint();
		 Thread.sleep(steps * DELAY);
	}
}
========================================================================================
import java.awt.Graphics;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import javax.swing.JComponent;

 /**
 A component that displays the current state of the selection sort algorithm.
 */
 public class MergeSortComponent extends JComponent
 {
	 private MergeSorter sorter;
	
	 private int [] values;
	 /**
	 Constructs the component.
	 * @throws FileNotFoundException 
	 */
	 public MergeSortComponent() throws FileNotFoundException
	 {
		values = new int[142];
		Scanner in = new Scanner(new File("output.txt"));
		int i = 0;
		while(in.hasNext())
		{
			values[i] = Integer.parseInt(in.next());
			i++;
		}
		 sorter = new MergeSorter(values, this);
	 }
	
	 public void paintComponent(Graphics g)
	 {
		  sorter.draw(g);
	 }
		 
	  /**
	  Starts a new animation thread.
	  */
	  public void startAnimation()
	  {
		  class AnimationRunnable implements Runnable
		  {
			  public void run()
			  {
				  try
				  {
					  sorter.mergeSort(0 , values.length-1);
				  }
				  catch (InterruptedException exception)
				  {
				  }
			  }
		  }
		 
		  Runnable r = new AnimationRunnable();
		  Thread t = new Thread(r);
		  t.start();
	  }
  }
========================================================================================

import java.awt.BorderLayout;
import java.io.FileNotFoundException;

import javax.swing.JFrame;

public class MergeSortViewer 
{
	private MergeSortComponent component;
	public MergeSortViewer() throws FileNotFoundException
	{
		JFrame frame = new JFrame();
		
		final int FRAME_WIDTH = 300;
		final int FRAME_HEIGHT = 400;
		
		frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		frame.setTitle("Merge Sort");
		component = new MergeSortComponent();
	
		frame.add(component, BorderLayout.CENTER);
		
		
		frame.setVisible(true);
		component.startAnimation();
	}
}
========================================================================================
import java.awt.Color;
import java.awt.Graphics;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import javax.swing.JComponent;
/**
This class sorts an array, using the selection sort algorithm.
*/
public class SelectionSorter
{
	// This array is being sorted
	private int[] a;
	// These instance variables are needed for drawing
	private int markedPosition = -1;
	private int alreadySorted = -1;
	private Lock sortStateLock;
	// The component is repainted when the animation is paused
	private JComponent component;
	private static final int DELAY = 5;
	/**
	Constructs a selection sorter.
	param anArray the array to sort
	param aComponent the component to be repainted when the animation
	pauses
	*/
	public SelectionSorter(int[] anArray, JComponent aComponent)
	{
		a = anArray;
		sortStateLock = new ReentrantLock();
		component = aComponent;
	}
	/**
	Sorts the array managed by this selection sorter.
	*/
	public void sort() throws InterruptedException
	{
		for (int i = 0; i < a.length - 1; i++)
		{
			int minPos = minimumPosition(i);
			sortStateLock.lock();
			try
			{
				ArrayUtil.swap(a, minPos, i);
				// For animation
				alreadySorted = i;
			}
			finally
			{
				sortStateLock.unlock();
			}
			pause(2);
		}
	}
	/**
	Finds the smallest element in a tail range of the array.
	param from the first position in a to compare
	return the position of the smallest element in the
	range a[from] . . . a[a.length - 1]
	*/
	private int minimumPosition(int from) throws InterruptedException
	{
		int minPos = from;
		for (int i = from + 1; i < a.length; i++)
		{
			sortStateLock.lock();
			try
			{
				if (a[i] < a[minPos]) { minPos = i; }
				// For animation
				markedPosition = i;
			}
			finally
			{
				sortStateLock.unlock();
			}
			pause(2);
		}
		return minPos;
	}
	/**
	Draws the current state of the sorting algorithm.
	param g the graphics context
	*/
	public void draw(Graphics g)
	{
		sortStateLock.lock();
		try
		{
			int deltaX = component.getWidth() / a.length;
			for (int i = 0; i < a.length; i++)
			{
				if (i == markedPosition)
				{
					g.setColor(Color.RED);
				}
				else if (i <= alreadySorted)
				{
					g.setColor(Color.BLUE);
				}
				else
				{
					g.setColor(Color.BLACK);
				}
				g.drawLine(i * deltaX, component.getHeight(), i * deltaX,component.getHeight() -  a[i]);
			}
		}
		finally
		{
			sortStateLock.unlock();
		}
	}
	/**
	Pauses the animation.
	param steps the number of steps to pause
	*/
	public void pause(int steps) throws InterruptedException
	{
		component.repaint();
		Thread.sleep(steps * DELAY);
	}
}
========================================================================================
import java.awt.Graphics;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import javax.swing.JComponent;

/**
A component that displays the current state of the selection sort algorithm.
*/
public class SelectionSortComponent extends JComponent
{
	private SelectionSorter sorter;
	
	/**
	Constructs the component.
	 * @throws FileNotFoundException 
	*/
	public SelectionSortComponent() throws FileNotFoundException
	{
		int[] values = new int[142];
		Scanner in = new Scanner(new File("output.txt"));
		int i = 0;
		while(in.hasNext())
		{
			values[i] = in.nextInt();
			i++;
		}
		sorter = new SelectionSorter(values, this);
	}
	
	public void paintComponent(Graphics g)
	{
		sorter.draw(g);
	}
		
	 /**
	 Starts a new animation thread.
	 */
	public void startAnimation()
	{
		 class AnimationRunnable implements Runnable
		 {
			 public void run()
			 {
				 try
				 {
					 sorter.sort();
				 }
				 catch (InterruptedException exception)
				 {
				 }
			 }
		 }
			
		 Runnable r = new AnimationRunnable();
		 Thread t = new Thread(r);
		 t.start();
	}
 }	
========================================================================================
import java.awt.BorderLayout;
import java.io.FileNotFoundException;

import javax.swing.JFrame;

public class SelectionSortViewer
{
	private SelectionSortComponent component;
	private int [] anArray;
	public SelectionSortViewer() throws FileNotFoundException
	{
		JFrame frame = new JFrame();
		final int FRAME_WIDTH = 300;
		final int FRAME_HEIGHT = 400;
		frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setTitle("Selection Sort");
		component = new SelectionSortComponent();
		frame.add(component, BorderLayout.CENTER);
		frame.setVisible(true);
		component.startAnimation();
	}
}
========================================================================================

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;

public class SelectionSorterAndMergeSorterViewer 
{
	public static void main(String [] args) throws FileNotFoundException
	{
		int[] values = ArrayUtil.randomIntArray(142, 340);
		PrintWriter out = new PrintWriter(new File("output.txt"));
		for(int i = 0 ; i < values.length ; i++)
			out.println(values[i]);
		out.close();

		SelectionSortViewer v1 = new SelectionSortViewer();

		MergeSortViewer v2 = new MergeSortViewer();
	}
}
========================================================================================
>> the selection sort is O(n^2) and the merge sort is O(nlogn) , however the selection sort is always faster than merge sort , may be because i increased the number of steps in a wrong way , or may be i did not consider a fair delay .