• P 20.4 Enhance the program of Exercise P20.3 by supplying a variable number of producer and consumer threads. Prompt the program 
user for the numbers.
========================================================================================
solution
---------
import java.util.LinkedList;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Queue 
{
	private LinkedList <Object> l;
	private Lock queueChangeLock;
	private Condition notEmptyCondition;
	private Condition notFullCondition;
	
	public Queue()
	{
		l = new LinkedList<>();
		queueChangeLock = new ReentrantLock();
		notEmptyCondition = queueChangeLock.newCondition();
		notFullCondition = queueChangeLock.newCondition();
	}
	
	public void add(Object element) throws InterruptedException
	{
		queueChangeLock.lock();
		try
		{
			while(l.size() >= 10)
			{
				notFullCondition.await();
			}
			l.addFirst(element);
			System.out.println("added element = " + element);
			notEmptyCondition.signalAll();
		}
		finally
		{
			queueChangeLock.unlock();
		}
	}
	public Object remove() throws InterruptedException
	{
		queueChangeLock.lock();
		try
		{
			while(l.isEmpty())
			{
				notEmptyCondition.await();
			}
			
			Object data = l.removeLast();
			System.out.println("removed element = " + data);
			
			if(l.size() < 10  )
				notFullCondition.signalAll();
				
			return data;
		}
		finally
		{
			queueChangeLock.unlock();
		}
	}	
}
========================================================================================
public class RemoveRunner implements Runnable
{
	private Queue q;
	private int iterations;
	
	public RemoveRunner(Queue q , int iterations)
	{
		this.q = q;
		this.iterations = iterations;
	}

	public void run() 
	{
		try
		{
			for(int i = 0 ; i < iterations ; i++)
			{
				q.remove();
				Thread.sleep(10);
			}
		}
		catch(InterruptedException e)
		{
		}
	}
}
========================================================================================
import java.util.Date;
public class AddRunner implements Runnable
{
	
	private Queue q;
	private int iterations;

	public AddRunner(Queue q ,  int iterations)
	{
		this.q = q;
		this.iterations = iterations;
	}

	public void run() 
	{
		try
		{
			for(int i = 0 ; i < iterations ; i++)
			{
				q.add(new Date().toString());
				Thread.sleep(10);
			}
		}
		catch(InterruptedException e)
		{
		}
	}
}
========================================================================================
import java.util.Scanner;

public class QueueThreadRunner 
{
	public static void main(String [] args)
	{
		
		Queue q = new Queue();
		final int ITERATIONS = 100;
		
		Scanner in = new Scanner(System.in);
		
		System.out.println("enter the number of producer threads: ");
		int producerNum = in.nextInt();
		
		System.out.println("enter the number of consumer  threads: ");
		int consumerNum = in.nextInt();
		
		
		for(int i = 0 ; i < producerNum ; i++)
		{
			AddRunner r1 = new AddRunner(q , ITERATIONS);
			Thread producer = new Thread(r1);
			producer.start();
		}
		
		for(int i = 0 ; i < consumerNum ; i++)
		{
			RemoveRunner r2 = new RemoveRunner(q , ITERATIONS);
			Thread consumer = new Thread(r2);
			consumer.start();
		}
	}
}
========================================================================================