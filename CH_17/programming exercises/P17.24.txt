• P 17.24 Time the results of heapsort and merge sort. Which algorithm behaves better in practice?
========================================================================================
solution
----------

>>the heap sort algorithm behaves better

>>here is the complete code that time the results of both algorithms:

========================================================================================
 /**
 The sort method of this class sorts an array, using the merge
 sort algorithm.
 */
 public class MergeSorter
 {
	 /**
	 Sorts an array, using merge sort.
	 @param a the array to sort
	 */
	 public static void sort(int[] a)
	 {
		 if (a.length <= 1) { return; }
		 int[] first = new int[a.length / 2];
		 int[] second = new int[a.length - first.length];
		 // Copy the first half of a into first, the second half into second
		 for (int i = 0; i < first.length; i++)
		 {
			 first[i] = a[i];
		 }
		 for (int i = 0; i < second.length; i++)
		 {
			 second[i] = a[first.length + i];
		 }
		 sort(first);
		 sort(second);
		 merge(first, second, a);
	 }
	
	 /**
	 Merges two sorted arrays into an array.
	 @param first the first sorted array
	 @param second the second sorted array
	 @param a the array into which to merge first and second
	 */
	 private static void merge(int[] first, int[] second, int[] a)
	 {
		 int iFirst = 0; // Next element to consider in the first array
		 int iSecond = 0; // Next element to consider in the second array
		 int j = 0; // Next open position in a
		
		 // As long as neither iFirst nor iSecond past the end, move
		 // the smaller element into a
		 while (iFirst < first.length && iSecond < second.length)
		 {
			 if (first[iFirst] < second[iSecond])
			 {
				 a[j] = first[iFirst];
				 iFirst++;
			 }
			 else
			 {
				 a[j] = second[iSecond];
				 iSecond++;
			 }
			 
			 j++;
		  }
		 
		  // Note that only one of the two loops below copies entries
		  // Copy any remaining entries of the first array
		  while (iFirst < first.length)
		  {
			  a[j] = first[iFirst];
			  iFirst++; j++;
		  }
		  // Copy any remaining entries of the second half
		  while (iSecond < second.length)
		  {
			  a[j] = second[iSecond];
			  iSecond++; j++;
		  }
	  }
  }
========================================================================================

public class HeapSorter 
{

	 static void sort(int[] a)
	 {
		 int n = a.length - 1;
		 for (int i = (n - 1) / 2; i >= 0; i--)
		 {
			 fixHeap(a, i, n);
		 }
		 while (n > 0)
		 {
			 ArrayUtil.swap(a, 0, n);
			 n--;
			 fixHeap(a, 0, n);
		 }
	 }
			 
	
	 public static void fixHeap(int[] a, int rootIndex, int lastIndex)
	 {
	  // Remove root
	  int rootValue = a[rootIndex];
	 
	  // Promote children while they are larger than the root
	 
	  int index = rootIndex;
	  boolean more = true;
	  while (more)
	  {
		  int childIndex = getLeftChildIndex(index);
		  if (childIndex <= lastIndex)
		  {
			  // Use right child instead if it is larger
			  int rightChildIndex = getRightChildIndex(index);
			  if (rightChildIndex <= lastIndex && a[rightChildIndex] > a[childIndex])
			  {
				  childIndex = rightChildIndex;
			  }
			  if (a[childIndex] > rootValue)
			  {
				  // Promote child
				  a[index] = a[childIndex];
				  index = childIndex;
			  }
			  else
			  {
				  // Root value is larger than both children
				  more = false;
			  }
		  }
		  else
		  {
			  // No children
			  more = false;
		  }
	  }
	 
	  // Store root value in vacant slot
	  a[index] = rootValue;
	  
	 }
			  
	 private static int getLeftChildIndex(int index)
	 {
		 return 2 * index + 1;
	 }
	
	 private static int getRightChildIndex(int index)
	 {
		 return 2 * index + 2;
	 }
 
}
========================================================================================
import java.util.Random;

public class ArrayUtil 
{
	private static Random generator = new Random();
	
	public static int[] randomIntArray(int length, int n)
	{
	  int[] a = new int[length];
	  
	  for (int i = 0; i < a.length; i++)
	  {
		  a[i] = generator.nextInt(n);
	  }
	  
	  return a;
	}
	
	public static void swap(int[] a, int i, int j)
	{
		 int temp = a[i];
		 a[i] = a[j];
		 a[j] = temp;
	}
}
========================================================================================
 /**
 A stopwatch accumulates time when it is running. You can
 repeatedly start and stop the stopwatch. You can use a
 stopwatch to measure the running time of a program.
 */
 public class StopWatch
 {
	 private long elapsedTime;
	 private long startTime;
	 private boolean isRunning;
	
	 /**
	 Constructs a stopwatch that is in the stopped state
	 and has no time accumulated.
	 */
	 public StopWatch()
	 {
		 reset();
	 }
	
	 /**
	 Starts the stopwatch. Time starts accumulating now.
	 */
	 public void start()
	 {
		 if (isRunning) { return; }
		 isRunning = true;
		 startTime = System.currentTimeMillis();
	 }
	
	 /**
	 Stops the stopwatch. Time stops accumulating and is
	 is added to the elapsed time.
	 */
	 public void stop()
	 {
		 if (!isRunning) { return; }
		 isRunning = false;
		 long endTime = System.currentTimeMillis();
		 elapsedTime = elapsedTime + endTime - startTime;
	 }
	
	 /**
	 Returns the total elapsed time.
	 @return the total elapsed time
	 */
	 public long getElapsedTime()
	 {
		 if (isRunning)
		 {
			  long endTime = System.currentTimeMillis();
			  return elapsedTime + endTime - startTime;
		 }
		 else
		 {
			 return elapsedTime;
		 }
	  }
	 
	  /**
	  Stops the watch and resets the elapsed time to 0.
	  */
	  public void reset()
	  {
		  elapsedTime = 0;
		  isRunning = false;
	  }
}
 ========================================================================================
import java.util.Scanner;

public class test1 {

	public static void main(String[] args)
	{
		Scanner in = new Scanner(System.in);
		System.out.print("Enter array size: ");
		int n = in.nextInt();
		
		// Construct random array
		
		int[] a = ArrayUtil.randomIntArray(n, 100);
		
		// Use stopwatch to time selection sort
		
		StopWatch timer = new StopWatch();
		
		timer.start();
		HeapSorter.sort(a);
		timer.stop();
		
		System.out.println("Elapsed time of heap sort: " + timer.getElapsedTime() + " milliseconds");
		
		timer.start();
		MergeSorter.sort(a);
		timer.stop();
		
		System.out.println("Elapsed time of merge sort: " + timer.getElapsedTime() + " milliseconds");
		
	}
}
========================================================================================
output
-------
Enter array size: 10000
Elapsed time of heap sort: 9 milliseconds
Elapsed time of merge sort: 19 milliseconds
--------------------------------------------------
Enter array size: 20000
Elapsed time of heap sort: 3 milliseconds
Elapsed time of merge sort: 5 milliseconds
---------------------------------------------------
Enter array size: 30000
Elapsed time of heap sort: 4 milliseconds
Elapsed time of merge sort: 7 milliseconds
---------------------------------------------------
Enter array size: 40000
Elapsed time of heap sort: 5 milliseconds
Elapsed time of merge sort: 10 milliseconds
========================================================================================