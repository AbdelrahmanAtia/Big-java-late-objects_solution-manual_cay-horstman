••• P 6.11 Write a method
public static boolean sameElements(int[] a, int[] b)
that checks whether two arrays have the same elements in some order, with the same
multiplicities. For example,
1 4 9 16 9 7 4 9 11
and
11 1 4 9 16 9 7 4 9
would be considered identical, but
1 4 9 16 9 7 4 9 11
and
11 11 7 9 16 4 1 4 9
would not. You will probably need one or more helper methods.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
public class world {
	public static void main(String [] args)
	{ 
		int [] values={1, 4, 9, 16, 9, 7, 4, 9 ,11};
		int [] inputs={11, 11, 7 ,9 ,16, 4, 1, 4, 9};
		boolean value=true;
		boolean x=sameSet(values,inputs);
		if(!x)
			value=false;
		else if(values.length!=inputs.length)
		    value=false;

		else
		{
			for(int i=0;i<values.length&&value;i++)
			{
				int element=values[i];
				if(count(element,values)!= count(element,inputs))
					value=false;
			}
		}
		if(value)
			System.out.println("identical");
		
		else
			System.out.println("not identical");
	
	}
	
	public static int count(int element,int []result)
	{
		int n=0;
		for(int j=0;j<result.length;j++)
		{
			if(element==result[j])
				n++;
		}
		
		return n;
	}
	public static boolean match(int a, int[] b)
	{ 
		for(int i=0;i<b.length;i++)
		{
		  if(a==b[i])
		     return true;
		}
		    return false;
	}
    public static boolean sameSet(int[] a, int[] b)
    {
    	for(int i=0;i<a.length;i++)
    	{
               if(!match(a[i] , b))
            	   return false;		
    	}
    	return true;
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------