•• P21.4 Modify the BankServer program to provide complete error checking. For example, the program should check to make sure that 
there is enough money in the account when withdrawing. Send appropriate error reports back to the client. Enhance the protocol to be 
similar to HTTP, in which each server response starts with a number indicating the success or failure condition, followed by a string with 
response data or an error description.
========================================================================================
solution
=====
import java.io.InputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;
/**
This program tests the bank server.
*/
public class BankClient
{
	public static void main(String[] args) throws IOException
	{
		try
		{
			final int SBAP_PORT = 8888;
			Socket s = new Socket("localhost", SBAP_PORT);
			InputStream instream = s.getInputStream();
			OutputStream outstream = s.getOutputStream();
			Scanner in = new Scanner(instream);
			PrintWriter out = new PrintWriter(outstream);
			
			String command = "DEPOSIT 3 1000\n";
			System.out.print("Sending: " + command);
			out.print(command);
			out.flush();
			String response = in.nextLine();
			System.out.println("Receiving: " + response);
			
			command = "WITHDRAW 3 200\n";
			System.out.print("Sending: " + command);
			out.print(command);
			out.flush();
			response = in.nextLine();
			System.out.println("Receiving: " + response);
			
			command = "WITHDRAW 3 2000\n";
			System.out.print("Sending: " + command);
			out.print(command);
			out.flush();
			response = in.nextLine();
			System.out.println("Receiving: " + response);
			
			command = "QUIT\n";
			System.out.print("Sending: " + command);
			out.print(command);
			out.flush();
			s.close();
		}
		catch(Exception ConnectException)
		{
			System.out.println("404 Not Found");
		}
	}
}
========================================================================================
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class BankServer 
{
	public static void main(String [] args) throws IOException
	{
		final int ACCOUNTS_LENGTH = 10;
		Bank bank = new Bank(ACCOUNTS_LENGTH);
		final int SBAP_PORT = 8888;
		ServerSocket server = new ServerSocket(SBAP_PORT);
		System.out.println("waiting for clients to connect ...");
		
		while(true)
		{
			Socket s = server.accept();
			System.out.println("200 Ok");
			System.out.println("Client Connected");
			BankService service = new BankService(s, bank);
			Thread t= new Thread(service);
			t.start();
		}
	}
}
========================================================================================
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;
/**
Executes Simple Bank Access Protocol commands
from a socket.
*/
public class BankService implements Runnable
{
	private Socket s;
	private Scanner in;
	private PrintWriter out;
	private Bank bank;
	/**
	Constructs a service object that processes commands
	from a socket for a bank.
	param aSocket the socket
	param aBank the bank
	*/
	public BankService(Socket aSocket, Bank aBank)
	{
		s = aSocket;
		bank = aBank;
	}
	public void run()
	{
		try
		{
			try
			{
				in = new Scanner(s.getInputStream());
				out = new PrintWriter(s.getOutputStream());
				doService();
			}
			finally
			{
				s.close();
			}
		}
		catch (IOException exception)
		{
			exception.printStackTrace();
		}
	}
	/**
	Executes all commands until the QUIT command or the
	end of input.
	*/
	public void doService() throws IOException
	{
		while (true)
		{
			if (!in.hasNext()) { return; }
			String command = in.next();
			if (command.equals("QUIT")) { return; }
			else executeCommand(command);
		}
	}
	/**
	Executes a single command.
	param command the command to execute
	*/
	public void executeCommand(String command)
	{
		int account = in.nextInt();
		if (command.equals("DEPOSIT"))
		{
			double amount = in.nextDouble();
			bank.deposit(account, amount);
		}
		else if (command.equals("WITHDRAW"))
		{
			double amount = in.nextDouble();
			if(amount > bank.getBalance(account))
			{
				out.println("not enough money in the account");
				out.flush();
				return;
			}
			else
			{
				bank.withdraw(account, amount);
			}
		}
		else if (!command.equals("BALANCE"))
		{
			out.println("Invalid command");
			out.flush();
			return;
		}
		out.println(account + " " + bank.getBalance(account));
		out.flush();
	}
}

========================================================================================

/**
 A bank account has a balance that can be changed by
 deposits and withdrawals.
 */
 public class BankAccount
 {
	 private double balance;

	 /**
	 Constructs a bank account with a zero balance.
	 */
	 public BankAccount()
	 {
		 balance = 0;
	 }
	
	 /**
	 Deposits money into the bank account.
	 @param amount the amount to deposit
	 * @throws InterruptedException 
	 */
	 public void deposit(double amount)
	 {
			  double newBalance = balance + amount;
			  balance = newBalance;
	}
		 
	  /**
	  Withdraws money from the bank account.
	  @param amount the amount to withdraw
	  */
	  public void withdraw(double amount) 
	  {
			  double newBalance = balance - amount;
			  balance = newBalance;
	  }
	
	 /**
	 Gets the current balance of the bank account.
	 @return the current balance
	 */
	 public double getBalance()
	 {
		 return balance;
	 }
 }
========================================================================================

/**
A bank consisting of multiple bank accounts.
*/
public class Bank
{
	private BankAccount[] accounts;
	/**
	Constructs a bank account with a given number of accounts.
	param size the number of accounts
	*/
	public Bank(int size)
	{
		accounts = new BankAccount[size];
		for (int i = 0; i < accounts.length; i++)
		{
			accounts[i] = new BankAccount();
		}
	}
	/**
	Deposits money into a bank account.
	param accountNumber the account number
	param amount the amount to deposit
	 * @throws InterruptedException 
	*/
	public void deposit(int accountNumber, double amount) 
	{
		BankAccount account = accounts[accountNumber];
		account.deposit(amount);
	}
	/**
	Withdraws money from a bank account.
	param accountNumber the account number
	param amount the amount to withdraw
	 * @throws InterruptedException 
	*/
	public void withdraw(int accountNumber, double amount)
	{
		BankAccount account = accounts[accountNumber];
		account.withdraw(amount);
	}
	/**
	Gets the balance of a bank account.
	param accountNumber the account number
	return the account balance
	*/
	public double getBalance(int accountNumber)
	{
		BankAccount account = accounts[accountNumber];
		return account.getBalance();
	}
}
========================================================================================
output
=====

for bank server
------------------
waiting for clients to connect ...
200 Ok
Client Connected


for bank client
-----------------
Sending: DEPOSIT 3 1000
Receiving: 3 1000.0
Sending: WITHDRAW 3 200
Receiving: 3 800.0
Sending: WITHDRAW 3 2000
Receiving: not enough money in the account
Sending: QUIT
========================================================================================


