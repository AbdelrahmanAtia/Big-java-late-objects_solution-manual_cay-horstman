•• P 19.6 Modify the BankSimulator program so that it is possible to delete an account. To delete a record from the data file, fill the record 
with zeroes.
========================================================================================
solution
----------

 import java.io.IOException;
 import java.util.Scanner;

 /**
 This program demonstrates random access. You can access
 existing accounts and deposit money, or create new accounts.
 The accounts are saved in a random access file.
 */
 public class BankSimulator {
	 
	 public static void main(String[] args) throws IOException
	 {
		 Scanner in = new Scanner(System.in);
		 BankData data = new BankData();
		 try
		 {
			 data.open("bank.dat");
			
			 boolean done = false;
			 while (!done)
			 {
				 System.out.print("Account number: ");
				 int accountNumber = in.nextInt();
				 System.out.println("enter 1)Deposite    2)Delete");
				 int user_in = in.nextInt();
				 if(user_in == 1)
				 {
					 System.out.print("Amount to deposit: ");
					 double amount = in.nextDouble();
					 BankAccount account ;

					 int position = data.find(accountNumber);
					 if (position >= 0)
					 {
						 account = data.read(position);
						 account.deposit(amount);
						 System.out.println("New balance: " + account.getBalance());
					 }
					 else // Add account
					 {
						 account = new BankAccount(accountNumber, amount);
						 position = data.size();
						 System.out.println("Adding new account.");
					 }
					 data.write(position, account);

				 }
				 else if(user_in == 2)
				 {
					 int position = data.find(accountNumber);
					 BankAccount account ;

					 double amount = 0;

					 if (position >= 0)
					 {
						 account = new BankAccount(accountNumber, amount);
						 data.write(position, account);
						 System.out.println("deleting an account.");

					 }
					 else
						 System.out.println("account number does not exist");
				 }
				
				 System.out.print("Done? (Y/N) ");
				 String input = in.next();
				 if (input.equalsIgnoreCase("Y")) { done = true; }
			 }
		 }
		 finally
		 {
			 data.close();
		 }
	 }
 }
========================================================================================
import java.io.IOException;
 import java.io.RandomAccessFile;

 /**
 This class is a conduit to a random access file
 containing bank account records.
 */
 public class BankData {
 private RandomAccessFile file;

 public static final int INT_SIZE = 4;
 public static final int DOUBLE_SIZE = 8;
 public static final int RECORD_SIZE = INT_SIZE + DOUBLE_SIZE;

 /**
 Constructs a BankData object that is not associated with a file.
 */
 public BankData()
 {
	 file = null;
 }

 /**
 Opens the data file.
 @param filename the name of the file containing bank
 account information
 */
 public void open(String filename)
 throws IOException
 {
	 if (file != null) { file.close(); }
	 file = new RandomAccessFile(filename, "rw");
 }

 /**
 Gets the number of accounts in the file.
 @return the number of accounts
 */
 public int size()
 throws IOException
 {
	 return (int) (file.length() / RECORD_SIZE);
 }

 /**
 Closes the data file.
 */
 public void close()
 throws IOException
 {
	 if (file != null) { file.close(); }
	 file = null;
 }

 /**
 Reads a bank account record.
 @param n the index of the account in the data file
 @return a bank account object initialized with the file data
 */
 public BankAccount read(int n)   throws IOException
 {
	 file.seek(n * RECORD_SIZE);
	 int accountNumber = file.readInt();
	 double balance = file.readDouble();
	 return new BankAccount(accountNumber, balance);
 }

 /**
 Finds the position of a bank account with a given number.
 @param accountNumber the number to find
 @return the position of the account with the given number,
 or –1 if there is no such account
 */
 public int find(int accountNumber) throws IOException
 {
	 for (int i = 0; i < size(); i++)
	 {
		 file.seek(i * RECORD_SIZE);
		 int a = file.readInt();
		 if (a == accountNumber) { return i; }
		 // Found a match
	 }
	 return -1; // No match in the entire file
 }

 /**
 Writes a bank account record to the data file.
 @param n the index of the account in the data file
 @param account the account to write
 */
 public void write(int n, BankAccount account)  throws IOException
 {
	 file.seek(n * RECORD_SIZE);
	 file.writeInt(account.getAccountNumber());
	 file.writeDouble(account.getBalance());
 }
}
========================================================================================

public class BankAccount 
{
	private int accountNumber;
	private double balance;
	public BankAccount(int accountNumber, double balance)
	{
		this.accountNumber = accountNumber;
		this.balance = balance;
		
	}
	public int getAccountNumber() {
		
		return accountNumber;
	}
	public double getBalance() {

		return balance;
	}
	public void deposit(double amount) {

		balance = balance + amount;
	}
	
}
========================================================================================